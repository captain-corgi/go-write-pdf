//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package powerpoint ;import (_e "encoding/xml";_g "fmt";_bg "github.com/unidoc/unioffice";);

// ValidateWithPath validates the CT_Rel and its children, prefixing error messages with path
func (_bf *CT_Rel )ValidateWithPath (path string )error {return nil };func (_eb *CT_Rel )UnmarshalXML (d *_e .Decoder ,start _e .StartElement )error {for _ ,_ff :=range start .Attr {if _ff .Name .Local =="\u0069\u0064"{_cd ,_cgc :=_ff .Value ,error (nil );
if _cgc !=nil {return _cgc ;};_eb .IdAttr =&_cd ;continue ;};};for {_cdb ,_ab :=d .Token ();if _ab !=nil {return _g .Errorf ("\u0070a\u0072s\u0069\u006e\u0067\u0020\u0043T\u005f\u0052e\u006c\u003a\u0020\u0025\u0073",_ab );};if _fg ,_gf :=_cdb .(_e .EndElement );
_gf &&_fg .Name ==start .Name {break ;};};return nil ;};

// Validate validates the Iscomment and its children
func (_gg *Iscomment )Validate ()error {return _gg .ValidateWithPath ("\u0049s\u0063\u006f\u006d\u006d\u0065\u006et");};type Textdata struct{CT_Rel };func NewCT_Rel ()*CT_Rel {_f :=&CT_Rel {};return _f };func (_d *CT_Empty )UnmarshalXML (d *_e .Decoder ,start _e .StartElement )error {for {_bga ,_a :=d .Token ();
if _a !=nil {return _g .Errorf ("p\u0061r\u0073\u0069\u006e\u0067\u0020\u0043\u0054\u005fE\u006d\u0070\u0074\u0079: \u0025\u0073",_a );};if _dg ,_cf :=_bga .(_e .EndElement );_cf &&_dg .Name ==start .Name {break ;};};return nil ;};type CT_Rel struct{IdAttr *string ;
};

// ValidateWithPath validates the Iscomment and its children, prefixing error messages with path
func (_acf *Iscomment )ValidateWithPath (path string )error {if _cb :=_acf .CT_Empty .ValidateWithPath (path );_cb !=nil {return _cb ;};return nil ;};func NewIscomment ()*Iscomment {_cga :=&Iscomment {};_cga .CT_Empty =*NewCT_Empty ();return _cga };type Iscomment struct{CT_Empty };
func (_cg *CT_Empty )MarshalXML (e *_e .Encoder ,start _e .StartElement )error {e .EncodeToken (start );e .EncodeToken (_e .EndElement {Name :start .Name });return nil ;};func (_df *Iscomment )UnmarshalXML (d *_e .Decoder ,start _e .StartElement )error {_df .CT_Empty =*NewCT_Empty ();
for {_fc ,_fe :=d .Token ();if _fe !=nil {return _g .Errorf ("p\u0061\u0072\u0073\u0069ng\u0020I\u0073\u0063\u006f\u006d\u006de\u006e\u0074\u003a\u0020\u0025\u0073",_fe );};if _dfe ,_aca :=_fc .(_e .EndElement );_aca &&_dfe .Name ==start .Name {break ;
};};return nil ;};

// Validate validates the CT_Rel and its children
func (_ac *CT_Rel )Validate ()error {return _ac .ValidateWithPath ("\u0043\u0054\u005f\u0052\u0065\u006c");};

// ValidateWithPath validates the CT_Empty and its children, prefixing error messages with path
func (_ef *CT_Empty )ValidateWithPath (path string )error {return nil };func (_gfa *Textdata )MarshalXML (e *_e .Encoder ,start _e .StartElement )error {start .Attr =append (start .Attr ,_e .Attr {Name :_e .Name {Local :"\u0078\u006d\u006cn\u0073"},Value :"\u0075\u0072\u006e\u003a\u0073\u0063\u0068e\u006d\u0061\u0073-\u006d\u0069\u0063\u0072o\u0073\u006f\u0066\u0074\u002d\u0063\u006f\u006d\u003a\u006f\u0066\u0066\u0069\u0063\u0065\u003a\u0070\u006f\u0077\u0065\u0072\u0070\u006f\u0069\u006e\u0074"});
start .Attr =append (start .Attr ,_e .Attr {Name :_e .Name {Local :"\u0078m\u006c\u006e\u0073\u003a\u0078\u006dl"},Value :"\u0068\u0074tp\u003a\u002f\u002fw\u0077\u0077\u002e\u00773.o\u0072g/\u0058\u004d\u004c\u002f\u0031\u0039\u00398/\u006e\u0061\u006d\u0065\u0073\u0070\u0061c\u0065"});
start .Name .Local ="\u0074\u0065\u0078\u0074\u0064\u0061\u0074\u0061";return _gfa .CT_Rel .MarshalXML (e ,start );};

// Validate validates the Textdata and its children
func (_cea *Textdata )Validate ()error {return _cea .ValidateWithPath ("\u0054\u0065\u0078\u0074\u0064\u0061\u0074\u0061");};func (_dd *Textdata )UnmarshalXML (d *_e .Decoder ,start _e .StartElement )error {_dd .CT_Rel =*NewCT_Rel ();for _ ,_fd :=range start .Attr {if _fd .Name .Local =="\u0069\u0064"{_cgcf ,_ce :=_fd .Value ,error (nil );
if _ce !=nil {return _ce ;};_dd .IdAttr =&_cgcf ;continue ;};};for {_cbd ,_be :=d .Token ();if _be !=nil {return _g .Errorf ("p\u0061r\u0073\u0069\u006e\u0067\u0020\u0054\u0065\u0078t\u0064\u0061\u0074\u0061: \u0025\u0073",_be );};if _abd ,_fb :=_cbd .(_e .EndElement );
_fb &&_abd .Name ==start .Name {break ;};};return nil ;};func NewCT_Empty ()*CT_Empty {_c :=&CT_Empty {};return _c };

// ValidateWithPath validates the Textdata and its children, prefixing error messages with path
func (_ea *Textdata )ValidateWithPath (path string )error {if _bb :=_ea .CT_Rel .ValidateWithPath (path );_bb !=nil {return _bb ;};return nil ;};func (_cfb *Iscomment )MarshalXML (e *_e .Encoder ,start _e .StartElement )error {start .Attr =append (start .Attr ,_e .Attr {Name :_e .Name {Local :"\u0078\u006d\u006cn\u0073"},Value :"\u0075\u0072\u006e\u003a\u0073\u0063\u0068e\u006d\u0061\u0073-\u006d\u0069\u0063\u0072o\u0073\u006f\u0066\u0074\u002d\u0063\u006f\u006d\u003a\u006f\u0066\u0066\u0069\u0063\u0065\u003a\u0070\u006f\u0077\u0065\u0072\u0070\u006f\u0069\u006e\u0074"});
start .Attr =append (start .Attr ,_e .Attr {Name :_e .Name {Local :"\u0078m\u006c\u006e\u0073\u003a\u0078\u006dl"},Value :"\u0068\u0074tp\u003a\u002f\u002fw\u0077\u0077\u002e\u00773.o\u0072g/\u0058\u004d\u004c\u002f\u0031\u0039\u00398/\u006e\u0061\u006d\u0065\u0073\u0070\u0061c\u0065"});
start .Name .Local ="\u0069s\u0063\u006f\u006d\u006d\u0065\u006et";return _cfb .CT_Empty .MarshalXML (e ,start );};func NewTextdata ()*Textdata {_eg :=&Textdata {};_eg .CT_Rel =*NewCT_Rel ();return _eg };func (_ga *CT_Rel )MarshalXML (e *_e .Encoder ,start _e .StartElement )error {if _ga .IdAttr !=nil {start .Attr =append (start .Attr ,_e .Attr {Name :_e .Name {Local :"\u0069\u0064"},Value :_g .Sprintf ("\u0025\u0076",*_ga .IdAttr )});
};e .EncodeToken (start );e .EncodeToken (_e .EndElement {Name :start .Name });return nil ;};

// Validate validates the CT_Empty and its children
func (_ad *CT_Empty )Validate ()error {return _ad .ValidateWithPath ("\u0043\u0054\u005f\u0045\u006d\u0070\u0074\u0079");};type CT_Empty struct{};func init (){_bg .RegisterConstructor ("\u0075\u0072\u006e\u003a\u0073\u0063\u0068e\u006d\u0061\u0073-\u006d\u0069\u0063\u0072o\u0073\u006f\u0066\u0074\u002d\u0063\u006f\u006d\u003a\u006f\u0066\u0066\u0069\u0063\u0065\u003a\u0070\u006f\u0077\u0065\u0072\u0070\u006f\u0069\u006e\u0074","\u0043\u0054\u005f\u0045\u006d\u0070\u0074\u0079",NewCT_Empty );
_bg .RegisterConstructor ("\u0075\u0072\u006e\u003a\u0073\u0063\u0068e\u006d\u0061\u0073-\u006d\u0069\u0063\u0072o\u0073\u006f\u0066\u0074\u002d\u0063\u006f\u006d\u003a\u006f\u0066\u0066\u0069\u0063\u0065\u003a\u0070\u006f\u0077\u0065\u0072\u0070\u006f\u0069\u006e\u0074","\u0043\u0054\u005f\u0052\u0065\u006c",NewCT_Rel );
_bg .RegisterConstructor ("\u0075\u0072\u006e\u003a\u0073\u0063\u0068e\u006d\u0061\u0073-\u006d\u0069\u0063\u0072o\u0073\u006f\u0066\u0074\u002d\u0063\u006f\u006d\u003a\u006f\u0066\u0066\u0069\u0063\u0065\u003a\u0070\u006f\u0077\u0065\u0072\u0070\u006f\u0069\u006e\u0074","\u0069s\u0063\u006f\u006d\u006d\u0065\u006et",NewIscomment );
_bg .RegisterConstructor ("\u0075\u0072\u006e\u003a\u0073\u0063\u0068e\u006d\u0061\u0073-\u006d\u0069\u0063\u0072o\u0073\u006f\u0066\u0074\u002d\u0063\u006f\u006d\u003a\u006f\u0066\u0066\u0069\u0063\u0065\u003a\u0070\u006f\u0077\u0065\u0072\u0070\u006f\u0069\u006e\u0074","\u0074\u0065\u0078\u0074\u0064\u0061\u0074\u0061",NewTextdata );
};