//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package logger ;import (_db "fmt";_e "io";_ac "os";_a "path/filepath";_df "runtime";);

// Info does nothing for dummy logger.
func (DummyLogger )Info (format string ,args ...interface{}){};

// Error logs error message.
func (_bd ConsoleLogger )Error (format string ,args ...interface{}){if _bd .LogLevel >=LogLevelError {_gea :="\u005b\u0045\u0052\u0052\u004f\u0052\u005d\u0020";_bd .output (_ac .Stdout ,_gea ,format ,args ...);};};

// Debug logs debug message.
func (_ega ConsoleLogger )Debug (format string ,args ...interface{}){if _ega .LogLevel >=LogLevelDebug {_egd :="\u005b\u0044\u0045\u0042\u0055\u0047\u005d\u0020";_ega .output (_ac .Stdout ,_egd ,format ,args ...);};};func (_fc ConsoleLogger )output (_ab _e .Writer ,_gg string ,_bb string ,_ag ...interface{}){_egf (_ab ,_gg ,_bb ,_ag ...);
};

// Warning logs warning message.
func (_dd ConsoleLogger )Warning (format string ,args ...interface{}){if _dd .LogLevel >=LogLevelWarning {_ae :="\u005b\u0057\u0041\u0052\u004e\u0049\u004e\u0047\u005d\u0020";_dd .output (_ac .Stdout ,_ae ,format ,args ...);};};

// IsLogLevel returns true if log level is greater or equal than `level`.
// Can be used to avoid resource intensive calls to loggers.
func (_cc ConsoleLogger )IsLogLevel (level LogLevel )bool {return _cc .LogLevel >=level };

// DummyLogger does nothing.
type DummyLogger struct{};

// Error logs error message.
func (_aed WriterLogger )Error (format string ,args ...interface{}){if _aed .LogLevel >=LogLevelError {_aee :="\u005b\u0045\u0052\u0052\u004f\u0052\u005d\u0020";_aed .logToWriter (_aed .Output ,_aee ,format ,args ...);};};

// ConsoleLogger is a logger that writes logs to the 'os.Stdout'
type ConsoleLogger struct{LogLevel LogLevel ;};

// LogLevel is the verbosity level for logging.
type LogLevel int ;

// Warning does nothing for dummy logger.
func (DummyLogger )Warning (format string ,args ...interface{}){};

// Error does nothing for dummy logger.
func (DummyLogger )Error (format string ,args ...interface{}){};

// Trace logs trace message.
func (_gda WriterLogger )Trace (format string ,args ...interface{}){if _gda .LogLevel >=LogLevelTrace {_gff :="\u005b\u0054\u0052\u0041\u0043\u0045\u005d\u0020";_gda .logToWriter (_gda .Output ,_gff ,format ,args ...);};};

// Trace does nothing for dummy logger.
func (DummyLogger )Trace (format string ,args ...interface{}){};

// Logger is the interface used for logging in the unipdf package.
type Logger interface{Error (_b string ,_c ...interface{});Warning (_g string ,_cf ...interface{});Notice (_ce string ,_f ...interface{});Info (_ge string ,_bg ...interface{});Debug (_fa string ,_gb ...interface{});Trace (_eg string ,_be ...interface{});
IsLogLevel (_fg LogLevel )bool ;};

// IsLogLevel returns true if log level is greater or equal than `level`.
// Can be used to avoid resource intensive calls to loggers.
func (_bbc WriterLogger )IsLogLevel (level LogLevel )bool {return _bbc .LogLevel >=level };

// Notice logs notice message.
func (_egb ConsoleLogger )Notice (format string ,args ...interface{}){if _egb .LogLevel >=LogLevelNotice {_ga :="\u005bN\u004f\u0054\u0049\u0043\u0045\u005d ";_egb .output (_ac .Stdout ,_ga ,format ,args ...);};};

// SetLogger sets 'logger' to be used by the unidoc unipdf library.
func SetLogger (logger Logger ){Log =logger };

// NewConsoleLogger creates new console logger.
func NewConsoleLogger (logLevel LogLevel )*ConsoleLogger {return &ConsoleLogger {LogLevel :logLevel }};var Log Logger =DummyLogger {};

// Info logs info message.
func (_bf WriterLogger )Info (format string ,args ...interface{}){if _bf .LogLevel >=LogLevelInfo {_aa :="\u005bI\u004e\u0046\u004f\u005d\u0020";_bf .logToWriter (_bf .Output ,_aa ,format ,args ...);};};

// Info logs info message.
func (_ca ConsoleLogger )Info (format string ,args ...interface{}){if _ca .LogLevel >=LogLevelInfo {_cag :="\u005bI\u004e\u0046\u004f\u005d\u0020";_ca .output (_ac .Stdout ,_cag ,format ,args ...);};};

// Notice does nothing for dummy logger.
func (DummyLogger )Notice (format string ,args ...interface{}){};

// WriterLogger is the logger that writes data to the Output writer
type WriterLogger struct{LogLevel LogLevel ;Output _e .Writer ;};

// Warning logs warning message.
func (_bgf WriterLogger )Warning (format string ,args ...interface{}){if _bgf .LogLevel >=LogLevelWarning {_gd :="\u005b\u0057\u0041\u0052\u004e\u0049\u004e\u0047\u005d\u0020";_bgf .logToWriter (_bgf .Output ,_gd ,format ,args ...);};};func _egf (_bgc _e .Writer ,_bda string ,_ed string ,_fdc ...interface{}){_ ,_acg ,_cae ,_ea :=_df .Caller (3);
if !_ea {_acg ="\u003f\u003f\u003f";_cae =0;}else {_acg =_a .Base (_acg );};_af :=_db .Sprintf ("\u0025s\u0020\u0025\u0073\u003a\u0025\u0064 ",_bda ,_acg ,_cae )+_ed +"\u000a";_db .Fprintf (_bgc ,_af ,_fdc ...);};

// Debug does nothing for dummy logger.
func (DummyLogger )Debug (format string ,args ...interface{}){};

// IsLogLevel returns true from dummy logger.
func (DummyLogger )IsLogLevel (level LogLevel )bool {return true };

// Trace logs trace message.
func (_ec ConsoleLogger )Trace (format string ,args ...interface{}){if _ec .LogLevel >=LogLevelTrace {_dbe :="\u005b\u0054\u0052\u0041\u0043\u0045\u005d\u0020";_ec .output (_ac .Stdout ,_dbe ,format ,args ...);};};const (LogLevelTrace LogLevel =5;LogLevelDebug LogLevel =4;
LogLevelInfo LogLevel =3;LogLevelNotice LogLevel =2;LogLevelWarning LogLevel =1;LogLevelError LogLevel =0;);func (_agg WriterLogger )logToWriter (_beeg _e .Writer ,_cfc string ,_fd string ,_ecc ...interface{}){_egf (_beeg ,_cfc ,_fd ,_ecc );};

// Notice logs notice message.
func (_gf WriterLogger )Notice (format string ,args ...interface{}){if _gf .LogLevel >=LogLevelNotice {_bee :="\u005bN\u004f\u0054\u0049\u0043\u0045\u005d ";_gf .logToWriter (_gf .Output ,_bee ,format ,args ...);};};

// Debug logs debug message.
func (_faf WriterLogger )Debug (format string ,args ...interface{}){if _faf .LogLevel >=LogLevelDebug {_caf :="\u005b\u0044\u0045\u0042\u0055\u0047\u005d\u0020";_faf .logToWriter (_faf .Output ,_caf ,format ,args ...);};};

// NewWriterLogger creates new 'writer' logger.
func NewWriterLogger (logLevel LogLevel ,writer _e .Writer )*WriterLogger {logger :=WriterLogger {Output :writer ,LogLevel :logLevel };return &logger ;};